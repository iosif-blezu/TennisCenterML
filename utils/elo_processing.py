import json
import os
from collections import defaultdict, deque

# Define the path for the ELO data file
ELO_DATA_FILE = os.path.join(os.path.dirname(__file__), '..', 'tennisbot', 'api', 'elo_data.json')

def save_elo_history(elo_grad_players):
    """
    Saves the elo_grad_players data to a JSON file.
    Converts deques to lists for JSON serialization.
    """
    # Convert deques to lists for JSON serialization
    serializable_data = {
        player_id: list(history)
        for player_id, history in elo_grad_players.items()
    }
    os.makedirs(os.path.dirname(ELO_DATA_FILE), exist_ok=True)
    with open(ELO_DATA_FILE, 'w') as f:
        json.dump(serializable_data, f)
    print(f"ELO history saved to {ELO_DATA_FILE}")

def load_elo_history():
    """
    Loads the ELO history from the JSON file.
    Returns a defaultdict(deque) as expected by other parts of the system.
    """
    if not os.path.exists(ELO_DATA_FILE):
        print(f"ELO data file not found: {ELO_DATA_FILE}")
        return defaultdict(lambda: deque(maxlen=1000))  # Return empty structure if file not found

    with open(ELO_DATA_FILE, 'r') as f:
        loaded_data = json.load(f)

    # Convert lists back to deques
    elo_grad_players = defaultdict(lambda: deque(maxlen=1000))
    for player_id, history_list in loaded_data.items():
        elo_grad_players[player_id].extend(history_list)
    
    print(f"ELO history loaded from {ELO_DATA_FILE}")
    return elo_grad_players

def get_elo_ranks_for_graph(player_id):
    """
    Retrieves the ELO history for a specific player.
    """
    all_elo_history = load_elo_history()
    player_history = all_elo_history.get(player_id)
    if player_history:
        return list(player_history) # Convert deque to list for the graph
    return []


# Placeholder for the main ELO calculation and data processing logic
# This function would typically:
# 1. Load match data (e.g., from the CSVs generated by CleanData.ipynb)
# 2. Iterate through matches, updating ELOs using logic from updateStats.py
# 3. Call save_elo_history with the resulting elo_grad_players
def process_and_save_elo_data():
    """
    Placeholder function to simulate ELO data processing and saving.
    In a real scenario, this would involve reading match data and
    calculating ELOs.
    """
    print("Starting ELO data processing (placeholder)...")
    
    # --- This part would be adapted from Dataset.ipynb and updateStats.py ---
    # Example:
    # matches_df = pd.read_csv('path_to_your_cleaned_match_data.csv')
    # prev_stats = createStats() # from updateStats.py
    # elo_grad_players_history_over_time = []

    # for index, match_row in matches_df.iterrows():
    #     # ... (data extraction and preparation for updateStats) ...
    #     prev_stats = updateStats(match_row_prepared, prev_stats)
    #     # Optionally store snapshot of elo_grad_players if needed for other purposes
    #     # current_elo_snapshot = {pid: list(hist) for pid, hist in prev_stats["elo_grad_players"].items()}
    #     # elo_grad_players_history_over_time.append(current_elo_snapshot)
    
    # For demonstration, let's create some dummy elo_grad_players data:
    dummy_elo_grad_players = defaultdict(lambda: deque(maxlen=1000))
    dummy_elo_grad_players["player123"].extend([1500, 1510, 1505, 1520, 1515, 1525, 1530])
    dummy_elo_grad_players["player456"].extend([1600, 1590, 1595, 1580, 1585])
    dummy_elo_grad_players["player789"].extend([1400, 1410, 1405, 1420, 1415, 1390])
    # --- End of adaptation ---

    save_elo_history(dummy_elo_grad_players)
    print("ELO data processing and saving complete.")

if __name__ == '__main__':
    # This allows running this script directly to generate/update the ELO data file
    process_and_save_elo_data()

    # Example of loading and using the data:
    # loaded_history = load_elo_history()
    # print("\nExample loaded data for player123:", get_elo_ranks_for_graph("player123"))
    # print("Example loaded data for player456:", get_elo_ranks_for_graph("player456"))
    # print("Example loaded data for a non-existent player:", get_elo_ranks_for_graph("player000")) 